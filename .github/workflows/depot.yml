name: main

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - "*"

env:
    REGISTRY: ghcr.io

jobs:
    build:
        name: Depot Build
        runs-on: depot-ubuntu-22.04-4
        strategy:
            matrix:
                arch: [amd64, arm64]
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v2
            - name: Login to Github Container Registry (GHCR)
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Setup Depot CLI
              uses: depot/setup-action@v1
              env:
                  DEPOT_TOKEN: ${{ secrets.DEPOT_API_TOKEN }}
            - name: Build and Push Docker Image with Depot
              run: |
                  depot build . \
                    --project hs0gfs4l0l \
                    --file Dockerfile \
                    --tag ${{ env.REGISTRY }}/${{ github.repository }}:${{ matrix.arch }}-latest \
                    --platform linux/${{ matrix.arch }} \
                    --build-arg ARCH=${{ matrix.arch }} \
                    --cache-from type=gha,scope=build-${{ matrix.arch }} \
                    --cache-to type=gha,mode=max,scope=build-${{ matrix.arch }} \
                    --load
                  if [ "${{ github.ref }}" == "refs/heads/main" ]; then
                    docker push ${{ env.REGISTRY }}/${{ github.repository }}:${{ matrix.arch }}-latest
                  fi
              env:
                  DEPOT_TOKEN: ${{ secrets.DEPOT_API_TOKEN }}

    manifest:
        name: Create and Push Multi-Architecture Manifest
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Install jq
              run: sudo apt-get install -y jq
            - name: Login to Docker Registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Create and Push Docker Manifest
              if: ${{ github.ref == 'refs/heads/main' }}
              run: |
                  docker pull --platform linux/amd64 ${{ env.REGISTRY }}/${{ github.repository }}:amd64-latest
                  docker pull --platform linux/arm64 ${{ env.REGISTRY }}/${{ github.repository }}:arm64-latest

                  docker manifest create ${{ env.REGISTRY }}/${{ github.repository }}:latest \
                    --amend ${{ env.REGISTRY }}/${{ github.repository }}:amd64-latest \
                    --amend ${{ env.REGISTRY }}/${{ github.repository }}:arm64-latest

                  docker manifest annotate ${{ env.REGISTRY }}/${{ github.repository }}:latest ${{ env.REGISTRY }}/${{ github.repository }}:amd64-latest --arch amd64
                  docker manifest annotate ${{ env.REGISTRY }}/${{ github.repository }}:latest ${{ env.REGISTRY }}/${{ github.repository }}:arm64-latest --arch arm64

                  docker manifest push ${{ env.REGISTRY }}/${{ github.repository }}:latest
        env:
            DOCKER_CLI_EXPERIMENTAL: enabled
    sanity:
      name: Coprocessor sanity check
      needs: manifest
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          submodules: recursive
          repository: "zippiehq/cartesi-coprocessor"

      - name: Set up docker compose
        uses: docker/setup-buildx-action@v2

      - name: Pull latest images
        run: docker compose -f docker-compose-devnet.yaml pull

      - name: Start docker-compose service
        run: IPFS_DAEMON_ONLINE= docker compose -f docker-compose-devnet.yaml up --wait -d || (docker compose -f docker-compose-devnet.yaml logs && false)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Sanity Run
        run: |
          echo "Starting ensure process..."
          curl -X POST "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342"

          # check the status
          check_status() {
            STATUS=$(curl -X POST -s "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342" | jq -r '.operator_ids_with_states["931a13987a36a6508d2ade6961f55d97209a7b42f66a7f0fdd899dea8fcb7d4d"]')
            echo "Current status: $STATUS"
            if [ "$STATUS" == "ready" ]; then
              return 0
            else
              return 1
            fi
          }

          echo "Polling for status to be 'ready'..."
          for i in {1..600}; do
            if check_status; then
              echo "Status is ready."
              break
            fi
            echo "Status not ready yet. Waiting 10 seconds..."
            sleep 10
            if [ "$i" -eq 600 ]; then
              echo "Timeout waiting for status to be ready."
              exit 1
            fi
          done

          echo "Calling issue_task endpoint..."
          curl -X POST "http://localhost:3034/issue_task/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/0xA44151489861Fe9e3055d95adC98FbD462B948e7" -d "example" || echo "Something went wrong: $?"

          docker compose -f docker-compose-devnet.yaml logs
          
          echo "Sanity check completed successfully."

    update:
      name: Update image
      runs-on: ubuntu-latest
      needs: sanity
      steps:
          - name: Set up Fly CLI
            uses: superfly/flyctl-actions/setup-flyctl@master
          - name: Update Fly Machines with updated Image
            if: ${{ github.ref == 'refs/heads/main' }}
            run: |
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
                DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ github.repository }}:latest)
                flyctl image update --app ${{ env.APP_NAME }} --image $DIGEST --yes
            env:
                FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
                APP_NAME: cartesi-coprocessor-solver-dev
                REGISTRY: ${{ env.REGISTRY }}
                GITHUB_REPOSITORY: ${{ github.repository }}

